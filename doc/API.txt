==================================================================================
The Tokyo Project is hosted on Sourceforge:
http://sourceforge.net/projects/tokyo/

Copyright (c) 2005-2007 Eric Bréchemier
http://eric.brechemier.name

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
==================================================================================

=========================================
Title: Tokyo Project - Data Handling API 
Last modified: 2007-08-19
By: Eric Bréchemier
Encoding: UTF-8
=========================================

                        *******************************   
                        **       Tokyo Project       **
                        **     Data Handling API     **
                        *******************************


This documents defines the Tokyo API designed as part of the Tokyo Project. The Tokyo API is 
at the core of custom data handling in the differents applications demonstrated in this project.

Tokyo API enables both XML and non-XML data transformations through a concise API: 
it is made of one interface, ITokyoNaut, as defined below:

public interface ITokyoNaut
{
  public boolean areWeThereYet();
  
  public void filter(int[] meta, byte[] data);
  
  public ITokyoNaut plug(ITokyoNaut source);
  
  public void unplug();
}

The name "TokyoNaut" is composed of "Tokyo", a mind-changing city where this project started, 
while "Naut" is a shorthand reference to Nautilus, Captain Nemo's submarine in Jules Verne's
"Twenty Thousand Leagues Under the Sea". 
More inspiration comes from Captain Nemo's motto: "Mobilis in Mobili".

Instances of classes that implement the ITokyoNaut interface are called TokyoNaut instances, or 
simply TokyoNauts. Their mission is to rewrite incrementally some input data, one step at a time.
Each call of the "morph" method runs one single rewrite step, morphing non-xml data towards xml
data using fixed size input and ouput buffers.

A set of simple TokyoNaut instances may be associated to realize a complex data transformation,
by chaining one TokyoNaut to the following through the use of the plug() method. Prototype One 
provides an example of a chained transformation, applied to CSV data about World Countries.

"meta" contains information about the current data item:
  meta[0]: VERSION - 0x01 for the present specification

The following fields are defined in the scope of version "0x01".
  meta[1]: EVENT   - "1" for "START DATA ITEM", 
                     "0" for "CONTINUE DATA ITEM", 
                     "-1" for "END DATA ITEM"
  meta[2]: ITEM    - data item type, based on the XML Infoset
  meta[3]: OFFSET  - offset in bytes in "data" buffer for the start of current chunk of item data
  meta[4]: LENGTH  - length in bytes in "data" buffer for the current chunk of item data

Following proper initialization, the following loop will run a step by step transformation 
until completion:

  while ( tokyoNaut.areWeThereYet()==false )
  {
    tokyoNaut.filter(meta,data);
  }

TokyoNauts can be associated in a chain of filters, by connecting them with the plug() method,
in the order of source to destination, e.g.:

  source.plug(filterOne).plug(filterTwo).plug(destination);
  
  while ( destination.areWeThereYet()==false )
  {
    source.filter(meta,data);
  }
  
  source.unplug();

In this case, note that the loop condition is tested on the "destination" TokyoNaut at the end 
of the chain, while the "filter" and final "unplug" calls are made on the "source" TokyoNaut
at the beginning.

=============== END OF DOCUMENT: Tokyo Project - Data Handling API ===============