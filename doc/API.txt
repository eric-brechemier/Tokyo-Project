==================================================================================
The Tokyo Project is hosted on Sourceforge:
http://sourceforge.net/projects/tokyo/

Copyright (c) 2005-2006 Eric Bréchemier
http://eric.brechemier.name

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
==================================================================================

=========================================
Title: Tokyo Project - Data handling API 
Last modified: 2006-08-27
By: Eric Bréchemier
Encoding: UTF-8
=========================================

                        *******************************   
                        **       Tokyo Project       **
                        **     Data Handling API     **
                        *******************************


This documents defines the "TokyoNautilus" data handling API designed as part of Tokyo Project.
This API is at the center of data access in the differents tools demonstrated in this project.

The TokyoNautilus API enables both XML and non-XML data browsing through a concise API. Nautilus is a 
reference to Captain Nemo's submarine in "Twenty Thousand Leagues Under the Sea" by Jules Verne.
Captain Nemo's motto, "Mobilis in Mobili", fits well with this flexible data navigation API. 

TokyoNautilus API is composed of a single interface, ITokyoNaut, with the seven following methods:
  
  Two Configuration Methods
  -------------------------
  * plug(ITokyoNaut collaborator, Object role) : ITokyoNaut
      Delegate some parts of the data handling with a "collaborator", as specified by "role".
      Return "collaborator" to allow further combinations on the same line of code.
  * unplug(ITokyoNaut collaborator, Object role) : ITokyoNaut
      Make "collaborator" redundant to free resources... ;(
      Return current TokyoNaut to allow new combinations on the same line of code.
  
  Three Data Navigation Methods
  -----------------------------
  * map(Object path, int from, Object[] buffer, int offset, int length) : int
      Scouts for data items on selection "path", and stores their locations in "buffer".
      To allow repeated calls of this method, the first items are ignored 
      until the "from" position is reached, counting from 1 like XPath position().
      Including "from", at most "length" items are then stored in "buffer".
      The "buffer" can be filled in several steps, by setting the "offset" to
      the starting position for the storage of new items. It corresponds to 
      the sum of values returned in previous calls, since this method 
      returns the actual number of items stored at each step.
      ITokyoNaut implementations should at least support "/","*","@*" for "path", 
      similarly to their XPath meaning in XML Documents.
  * go(Object path) : ITokyoNaut
      Jump to a well-suited position for reading the first item on given "path",
      starting from here() excluded.
      Return this TokyoNaut to allow further moves on the same line of code.
      Sets current location to "nowhere" (here() returns null)
      when this move is not supported or no data item is found.
      ITokyoNaut implementations should at least support "/","*","@*" for "path", 
      similarly to their XPath meaning in XML Documents.
  * here() : Object  
      Return current location.
      Can be used for bookmarking, by storing the returned location and later 
      calling go(location); however, in mutable data structures, there is
      no warranty that the corresponding data item will be exactly the same, 
      or even still exist.
      Return null if previous call to go() led to "nowhere", as well as initially 
      before any call to go().
      In ITokyoNaut implementations, when here() is not null, calling here().toString() 
      should return an absolute path, either in XPath in the context of a single document,
      or in XPointer to also include current document's URI.
  
  Two Data Access Methods
  -----------------------
  * get(Object path) : Object  
      Return the value of the first item found on given "path".
      Return null when this move is not supported or no data item is found.
      ITokyoNaut implementations should at least support "." for "path",
      in the context of simple data items with text values,
      similarly to its XPath meaning in XML Documents.
  * put(Object path, Object item) : Object
      Put given "item" at the first position on given "path", 
      replacing any previous data item found there.
      Returns null if this "path" is not supported or the data structure is immutable.
      Can be used to delete data items by setting "item" to null.
      Insertion before, between, or after existing data items may be supported by 
      refining on the "path", e.g. inserting "+" or "-" after positions as in
      "/Root/Element[3+]" or "/Root/Element[1-]".
      ITokyoNaut implementations should only support the put() method when found relevant.

The design of TokyoNautilus implementations can be successfully achieved by starting 
from the NullNautilus provided below, and adding required functionalities in an iterative way:

class NullNautilus implements ITokyoNaut
{
  ITokyoNaut plug(INautilus collaborator, Object role)
    {return collaborator;}
  ITokyoNaut unplug(INautilus collaborator, Object role)
    {return this;}
  int map(Object path, int from, Object[] buffer, int offset, int length)
    {return 0;}
  INautilus go(Object path)
    {return this;}
  Object here()
    {return null;}
  Object get(Object path)
    {return null;}
  Object put(Object path, Object item)
    {return null;}
}
=============== END OF DOCUMENT: Tokyo Project - Data handling API ===============