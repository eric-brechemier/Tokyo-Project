==================================================================================
 The Tokyo Project is hosted on GitHub:
 https://github.com/eric-brechemier/Tokyo-Project
 
 Copyright (c) 2005-2008 Eric Bréchemier
 http://eric.brechemier.name
 Licensed under BSD License and/or MIT License.
 See: http://creativecommons.org/licenses/BSD/
==================================================================================
  
=========================================
Title: Tokyo Project - Data Handling API 
Last modified: 2008-01-15
By: Eric Bréchemier
Encoding: UTF-8
=========================================

                        *******************************   
                        **       Tokyo Project       **
                        **     Data Handling API     **
                        *******************************


This documents defines the Tokyo API designed as part of the Tokyo Project. The Tokyo API is 
at the core of custom data handling in the differents applications demonstrated in this project.

Tokyo API enables both XML and non-XML data transformations through a concise API: 
it is made of one interface, ITokyoNaut, as defined below:

  public interface ITokyoNaut
  {
    /* (...) definition of constant values omitted */
    
    public boolean areWeThereYet(ITokyoNaut[] chain, int position, int[] meta);
    public void notYet(ITokyoNaut source, byte[] data);
  }

The name "TokyoNaut" is composed of "Tokyo", a mind-changing city where this project started, 
while "Naut" is a shorthand reference to Nautilus, Captain Nemo's submarine in Jules Verne's
"Twenty Thousand Leagues Under the Sea". More inspiration comes from Captain Nemo's motto: 

  "Mobilis in Mobili"

Instances of classes that implement the ITokyoNaut interface are called TokyoNaut instances, or 
simply TokyoNauts. Their mission is to insert tokens in a stream of events associating metadata
and binary data.

TokyoNauts are just intended to perform a single, simple operation, like recognizing lines, fields
and separators in text formatted using Comma-Separated-Values (CSV). 

So for non-trivial purpose you have to gather a few and associate them in a chain, by putting them
in an array of ITokyoNaut, connecting them left-to-right in the order of source to destination:

  ITokyoNaut[] chain = {source,filterOne,filterTwo,destination};
  
You will then write a main loop pulling events out of the stream one by one. This is done by calling
repeatedly the areWeThereYet() method, until it (finally) returns true. Something like:

  while( (step++ < STEP_LIMIT) && !destination.areWeThereYet(chain,chain.length-1,meta)   )
  {
    // main loop
  }

Along with the chain, the areWeThereYet method requires as a second argument the position of the 
current TokyoNaut in the chain: in the above example, "chain.length-1" refers to the position of
the destination object in the chain array, which is the current instance on which the areWeThereYet
method is called. When this destination object will call areWeThereYet method on the preceding
filterTwo object, it will associate the chain.length-2 position, and so on...

Unlike well-behaved children, you would be well advised not to assume that the trip will actually end 
before reaching Alpha Centauri, and you'd better set an upper-bound to the number of steps, or the amount 
of time elapsed, you are willing to wait for completion:

  int step = 0;
  final int STEP_LIMIT = 3;
  while( (step++ < STEP_LIMIT) && !destination.areWeThereYet(chain,chain.length-1,meta)   )
  {
    // main loop
  }

Note that the areWeThereYet() method is called on the destination TokyoNaut, last at the right of the 
chain, something like a Far East destination... It is because of this pulling of events that the actual 
annotation process goes on, each TokyoNaut asking for events in the same manner from the preceding 
TokyoNaut one step behind in the chain.

  // inside destination
  public boolean areWeThereYet(ITokyoNaut[] chain, int position, int[] meta)
  {
    if ( _completed() )
    {
      _terminate();
      return true;
    }
    
    int source = position -1;
    if (source>0)
      _completed = chain[source].areWeThereYet(chain,position-1,meta);
    
    meta[VERSION]  = VERSION_NANA;
    meta[LANGUAGE] = LANGUAGE_BINARY;
    meta[TOKEN]    = TOKEN_BINARY;
    meta[LEFT]     = LEFT_START;
    meta[OFFSET]   = 0;
    meta[LENGTH]   = 11;
    meta[RIGHT]    = RIGHT_END;
    
    int destination = position+1;
    if (destination<chain.length)
      chain[destination].notYet(this,_data);
    return false;
  }

"meta" is an array of seven integers (in the current NANA version of the "Tokyo Project") which contains 
metadata information about the current data token. Let's raise the veil of some of ITokyoNaut constants:
  
  public static final int VERSION  = 0;
  public static final int LANGUAGE = 1;
  public static final int TOKEN    = 2;
  public static final int LEFT     = 3;
  public static final int OFFSET   = 4;
  public static final int LENGTH   = 5;
  public static final int RIGHT    = 6;
  
These are the seven fields of the "meta" array, each constant being assigned the expected position of the 
field in the meta array. We will describe each one by one below, and list the remaining omitted constants 
from ITokyoNaut, nothing less than the most useful values for each of the above fields.

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// VERSION  
    /** meta[VERSION] - the version of "Tokyo Project" in use (in order to check compatibility) */
    public static final int VERSION = 0;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constant Values:
    /** a value for meta[VERSION] - current Version of the Tokyo Project */
    public static final int VERSION_NANA = 7;
  
// Values:
//   [0x0000-0xFFFF]       reserved for current and future versions of the "Tokyo Project"
//   [0x10000-0xFFFFFFFF]  available for use in your (let's say "user-defined") extension
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// LANGUAGE
    /** meta[LANGUAGE] - the language or format specification providing the scope of the token id */
    public static final int LANGUAGE = 1;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constant Values:
    /** a value for meta[LANGUAGE] - any Binary data without further semantic */
    public static final int LANGUAGE_BINARY       = 0;
    
    /** a value for meta[LANGUAGE] - Unicode text with character code points as tokens */
    public static final int LANGUAGE_UNICODE_TEXT = 1;
    
    /** a value for meta[LANGUAGE] - Error signalling with application error codes as tokens */
    public static final int LANGUAGE_ERROR        = 0xFA11ED;
    
// Values:
//   [0x0000-0xFFFF]        reserved     - for current and future versions of the "Tokyo Project"
//   [0x10000-0xFA11EC]     user-defined - available for use in your extension
//   [0xFA11ED]             reserved     - for current and future versions of the "Tokyo Project"
//   [0xFA11EE-0xFFFFFFFF]  user-defined - available for use in your extension
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// TOKEN
    /** meta[TOKEN] - the token id, scoped by the language id */
    public static final int TOKEN = 2;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constant Values:
    /** a value for meta[TOKEN] - in LANGUAGE_BINARY, a fragment of binary data carried in "data" buffer */
    public static final int TOKEN_BINARY          = 1;
    
// Values:
//   in meta[LANGUAGE] = LANGUAGE_BINARY
//     [0x0000-0xFFFF]       reserved     - for current and future versions of the "Tokyo Project"
//     [0x10000-0xFFFFFFFF]  user-defined - available for use in your extension
// 
//   in meta[LANGUAGE] = LANGUAGE_UNICODE_TEXT
//     [0x0000-0xFFFFFFFF]   reserved     - for current and future versions of Unicode code points
//  
//   in meta[LANGUAGE] = LANGUAGE_ERROR
//     [0x0000-0xFFFFFFFF]   user-defined - application error code you can assign and use freely
//  
//   in meta[LANGUAGE] = [0x0002-0xFFFF]
//     [0x0000-0xFFFFFFFF]   reserved     - for current and future versions of the "Tokyo Project"
//     
//   in meta[LANGUAGE] = [0x10000-0xFA11EC] U [0xFA11EE-0xFFFFFFFF]
//     [0x0000-0xFFFFFFFF]   user-defined - available for use in your extension
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// LEFT
    /** meta[LEFT] - the relation (START or CONTINUED) on the left (=start offset) of the fragment.
                     CONTINUED is used for all but the last token in long tokens reported as several 
                     data fragments.
     */
    public static final int LEFT = 3;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constant Values:
    /** a value for meta[LEFT] - this data fragment is the first in the complete token */
    public static final int LEFT_START = 1;
    /** a value for meta[LEFT] - this data fragment is a continuation of a started token */
    public static final int LEFT_CONTINUED = 0;
    
// Values:
//   [0x0000-0xFFFFFFFF]   reserved - for current and future versions of the "Tokyo Project"
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// RIGHT
    /** meta[RIGHT] - the relation (END or CONTINUED) on the right (=end offset, or start+length) of 
                      the fragment. CONTINUED is used for all but the first token in long tokens reported 
                      as several data fragments.
     */
    public static final int RIGHT = 6;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constant Values:
    /** a value for meta[RIGHT] - there are one or more continuation fragment to complete this token */
    public static final int RIGHT_CONTINUED = 0;
    /** a value for meta[RIGHT] - this data fragment is the last in the complete token */
    public static final int RIGHT_END = -1;
    
// Values:
//   [0x0000-0xFFFFFFFF]   reserved - for current and future versions of the "Tokyo Project"
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// OFFSET
    /** meta[OFFSET] - the fragment start offset (in bytes) in accompanying "data" buffer */
    public static final int OFFSET = 4;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constant Values:
//   None
//  
// Values:
//   [0x0000-0x7FFFFFFF]   range of allowed offset values (in bytes)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// LENGTH
    /** meta[LENGTH] - the fragment length offset (in bytes) in accompanying "data" buffer */
    public static final int LENGTH = 5;
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// Constant Values:
//   None
//  
// Values:
//   [0x0000-0x7FFFFFFF]   range of allowed length values (in bytes)
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  
  
From this point, you can have a look at the first prototype, working with CSV data, to check the 
implementation details on a practical use case. The design steps for this prototype are described in
the PROCESS.txt document.

=============== END OF DOCUMENT: Tokyo Project - Data Handling API ===============