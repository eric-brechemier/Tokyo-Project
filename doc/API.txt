==================================================================================
The Tokyo Project is hosted on Sourceforge:
http://sourceforge.net/projects/tokyo/

Copyright (c) 2005-2007 Eric Bréchemier
http://eric.brechemier.name

This library is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.

This library is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.

You should have received a copy of the GNU Lesser General Public
License along with this library; if not, write to the Free Software
Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
==================================================================================

=========================================
Title: Tokyo Project - Data Handling API 
Last modified: 2007-02-20
By: Eric Bréchemier
Encoding: UTF-8
=========================================

                        *******************************   
                        **       Tokyo Project       **
                        **     Data Handling API     **
                        *******************************


This documents defines the Tokyo API designed as part of the Tokyo Project. The Tokyo API is 
at the core of custom data handling in the differents applications demonstrated in this project.

Tokyo API enables both XML and non-XML data transformations through a concise API: 
it is made of one interface, ITokyoNaut, with a single method, "morph":

public interface ITokyoNaut
{
  public void morph(Object[] state, Object[] rules, Object[] data);
}

The name "TokyoNaut" is composed of "Tokyo", a mind-changing city where this project started, 
while "Naut" is a shorthand reference to Nautilus, Captain Nemo's submarine in Jules Verne's
"Twenty Thousand Leagues Under the Sea". 
Additional inspiration comes from Captain Nemo's motto: "Mobilis in Mobili".

Instances of classes that implement the ITokyoNaut interface are designed here as TokyoNaut instances,
or simply TokyoNauts. Their mission is to rewrite incrementally some input data, one step at a time.
Each call of the "morph" method runs one single rewrite step, which could correspond to one line of text,
one binary structure or an XML fragment depending on the format at hand and the choice of implementation.

The order of "morph" parameters can be easily remembered with the sentence: "State rules data."
which has no hidden purpose excepted mnemotechnics.

TokyoNaut instances shall be stateless; each one will be allocated one box in the "state" array
allowing to preserve some required properties or objects too costly to be created at each new run.

A set of simple TokyoNaut instances may be associated to realize a complex data transformation.
For example by first converting an array of binary data to an array of Strings, second adding
some structure markers at strategic places resulting in a new array, we can provide an XML view of 
custom non-xml data. We will provide such an example below, applied to CSV data about World Countries.

The "rules" array contains the transformation rules that organize the collaboration of different
TokyoNaut instances. In the run of a data transformation, the same three structures, "state", "rules" 
and "data" are provided to all collaborating TokyoNauts. Implementors have full latitude to choose 
how to represent instructions or rules, e.g. by defining Classes corresponding to different operations. 
In order to facilitate interoperability and versioning, the first box of the "rules" array, at rules[0], 
shall contain an Object identifying the language chosen/defined for the following rules. 
Calling rules[0].toString() shall return a URI (Unified Resource Identifier) identifying the language, 
such as "http://www.example.com/tokyo/ant/1.0" for the (hypothetical) version of 1.0 of a custom language 
defined by the owner of "example.com" based on Apache Ant tasks.

TODO: ADD EXAMPLE OF CSV PARSING FOR PROTOTYPE 1


=============== END OF DOCUMENT: Tokyo Project - Data Handling API ===============